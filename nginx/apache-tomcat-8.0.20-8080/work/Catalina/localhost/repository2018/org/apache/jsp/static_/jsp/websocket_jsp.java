/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.20
 * Generated at: 2018-08-25 09:22:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.static_.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class websocket_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    String path = request.getContextPath();
    String basePath = request.getScheme() + "://"+request.getServerName() + ":" + request.getServerPort() + path + "/style/";

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <base href=\"");
      out.print(basePath);
      out.write("\">\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("    <script src=\"js/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        $(function() {\r\n");
      out.write("            $(\"#btnConnection\").click(function() {\r\n");
      out.write("                //实现化WebSocket对象，指定要连接的服务器地址与端口\r\n");
      out.write("                var host='ws://localhost:8080/gradleproject1.0/websocket';\r\n");
      out.write("                var socket;\r\n");
      out.write("                if ('WebSocket' in window) {\r\n");
      out.write("                    socket = new WebSocket(host);\r\n");
      out.write("                } else if ('MozWebSocket' in window) {\r\n");
      out.write("                    socket = new MozWebSocket(host);\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert('提示', '当前浏览器不支持websocket，请更换浏览器');\r\n");
      out.write("                    return;\r\n");
      out.write("                } //打开事件\r\n");
      out.write("                socket.onopen = function() {\r\n");
      out.write("                    alert(\"Socket 已打开\");\r\n");
      out.write("                    socket.send(\"这是来自客户端的消息\" + location.href + new Date());\r\n");
      out.write("                };\r\n");
      out.write("                //获得消息事件\r\n");
      out.write("                socket.onmessage = function(msg) {\r\n");
      out.write("                    alert(msg.data);\r\n");
      out.write("                };\r\n");
      out.write("                //关闭事件\r\n");
      out.write("                socket.onclose = function() {\r\n");
      out.write("                    alert(\"Socket已关闭\");\r\n");
      out.write("                };\r\n");
      out.write("                //发生了错误事件\r\n");
      out.write("                socket.onerror = function() {\r\n");
      out.write("                    alert(\"发生了错误\");\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(\"#btnSend\").click(function() {\r\n");
      out.write("                socket.send(\"这是来自客户端的消息\" + location.href + new Date());\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $(\"#btnClose\").click(function() {\r\n");
      out.write("                socket.close();\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        var websocket = new WebSocket('ws://localhost:8080/gradleproject1.0/webSocketServer/bing');\r\n");
      out.write("\r\n");
      out.write("        websocket.onopen = function (evnt) {\r\n");
      out.write("            document.getElementById('messages').innerHTML\r\n");
      out.write("                = 'Connection established';\r\n");
      out.write("        };\r\n");
      out.write("        websocket.onmessage = function (evnt) {\r\n");
      out.write("            document.getElementById('messages').innerHTML\r\n");
      out.write("                += '<br />' + event.data;\r\n");
      out.write("        };\r\n");
      out.write("        websocket.onerror = function (evnt) {\r\n");
      out.write("            alert('发生了错误:'+event)\r\n");
      out.write("        };\r\n");
      out.write("        websocket.onclose = function (evnt) {\r\n");
      out.write("            alert('关闭:'+event)\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        function start() {\r\n");
      out.write("            websocket.send('hello');\r\n");
      out.write("            return false;\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"text-align: left;padding: 10px 0 0 10px\">\r\n");
      out.write("  <input  type=\"button\"  value=\"websever发送消息\" style=\"background-color: red;color: white;size: 20px\" id=\"btnConnection\"/><br/><br/>\r\n");
      out.write("  <input type=\"button\" value=\"Start\" onclick=\"start()\"/>\r\n");
      out.write("  <div id=\"messages\"></div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
